import flash.display.MovieClip;

stop();

CreateBtn.addEventListener(MouseEvent.CLICK, CreateBtn_Press);
CreateBtn.addEventListener(MouseEvent.ROLL_OVER, CreateBtn_RollOver);
CreateBtn.addEventListener(MouseEvent.ROLL_OUT,CreateBtn_RollOut);
function CreateBtn_Press(ev:MouseEvent):void{
	GreyOutMc.x = 800;
	GreyOutMc.y = 800;
	GetTextBtn.x = 833;
	GetTextBtn.y = 907;
	CreateNewWorld(NameInputTxt.text, int(WidthInputTxt.text), int(HeightInputTxt.text));
	this.addEventListener(Event.ENTER_FRAME,LevelCreatorUpdateGame);
}
function CreateBtn_RollOver(ev:MouseEvent):void{
}
function CreateBtn_RollOut(ev:MouseEvent):void{
}

var fileRef:FileReference= new FileReference();
LoadBtn.addEventListener(MouseEvent.CLICK, LoadBtn_Press);
function LoadBtn_Press(ev:MouseEvent):void {
	fileRef.browse([new FileFilter("Images", "*.txt")]);
	fileRef.addEventListener(Event.SELECT, onFileSelected);
}

function onFileSelected(e:Event):void {
fileRef.addEventListener(Event.COMPLETE, onFileLoaded);
fileRef.load();
}
function onFileLoaded(e:Event):void {
	GreyOutMc.x = 800;
	GreyOutMc.y = 800;
	GetTextBtn.x = 833;
	GetTextBtn.y = 907;
	trace(e.target.data);
	 //var myArrayOfLines:Array = e.target.data.split(/,/);
	 var TempCurrentOverworldLevel:Array = String(e.target.data).split(/\n/);

	 
	//Overworld Level Name
	LevelCreatorCurrentOverworldLevel[0] = new String(TempCurrentOverworldLevel[0]);
	//Overworld Level Width
	LevelCreatorCurrentOverworldLevel[1] = new int(TempCurrentOverworldLevel[1]);
	//Overworld Level Height
	LevelCreatorCurrentOverworldLevel[2] = new int(TempCurrentOverworldLevel[2]);
	
	 var ST_1_InnerArray:Array = TempCurrentOverworldLevel[3].split("[");
	 //LevelCreatorCurrentOverworldLevel
	 trace(" ---- ");
	 trace(ST_1_InnerArray);
	 trace(ST_1_InnerArray[0]);
	 trace(ST_1_InnerArray[1]);
	 
	 var ST_11_InnerThing:Array = new Array(LevelCreatorCurrentOverworldLevel[1]);
	 for(var selectorI2:uint = 0; selectorI2 < LevelCreatorCurrentOverworldLevel[1]; selectorI2++){
		 ST_11_InnerThing[selectorI2] = ST_1_InnerArray[selectorI2].split("]");		 
	 }
	 

	//Overworld Level Array
	LevelCreatorCurrentOverworldLevel[3] = new Array(LevelCreatorCurrentOverworldLevel[1]);
	for(var selectorI:uint = 0; selectorI < LevelCreatorCurrentOverworldLevel[1]; selectorI++){
		LevelCreatorCurrentOverworldLevel[3][selectorI] = new Array(LevelCreatorCurrentOverworldLevel[2]);
		for(var selectorJ:uint = 0; selectorJ < LevelCreatorCurrentOverworldLevel[2]; selectorJ++){
			var TempMostInnerArray:Array = ST_11_InnerThing[selectorI][selectorJ].split(",");
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ] = new Array(11);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][0] = new int(TempMostInnerArray[0]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][1] = new int(TempMostInnerArray[1]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][3] = new int(TempMostInnerArray[2]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][4] = new int(TempMostInnerArray[3]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][6] = new String(TempMostInnerArray[4]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][7] = new int(TempMostInnerArray[5]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][8] = new int(TempMostInnerArray[6]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][9] = new int(TempMostInnerArray[7]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][10] = new String(TempMostInnerArray[8]);
			var tempGridItem:DevGridTest = new DevGridTest();
			addChild(tempGridItem);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2] = tempGridItem;
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].gotoAndStop(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][1]);
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].x = MostLeft + (selectorI*gridSizeLevelCreator)  - gridSizeLevelCreator/2;
			LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].y = MostTop + (selectorJ*gridSizeLevelCreator)  - gridSizeLevelCreator/2;
			SendMovieClipToBack(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2]);
			if(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].x>=800){
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = false;
			}
			if(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].y>=800){
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = false;
			}
		}
	}
}




SneakyMouseMc.addEventListener(MouseEvent.CLICK, SneakyMouseMc_Press);
function SneakyMouseMc_Press(ev:MouseEvent):void{
	ChangeBlock(mouseX, mouseY);
}



GetTextBtn.addEventListener(MouseEvent.CLICK, GetTextBtn_Press);
GetTextBtn.addEventListener(MouseEvent.ROLL_OVER, GetTextBtn_RollOver);
GetTextBtn.addEventListener(MouseEvent.ROLL_OUT,GetTextBtn_RollOut);
function GetTextBtn_Press(ev:MouseEvent):void{
	SaveLevel();
}
function GetTextBtn_RollOver(ev:MouseEvent):void{
}
function GetTextBtn_RollOut(ev:MouseEvent):void{
}


 
ImgChooseUpBtn.addEventListener(MouseEvent.CLICK, ImgChooseUpBtn_Press);
ImgChooseUpBtn.addEventListener(MouseEvent.ROLL_OVER, ImgChooseUpBtn_RollOver);
ImgChooseUpBtn.addEventListener(MouseEvent.ROLL_OUT,ImgChooseUpBtn_RollOut);
function ImgChooseUpBtn_Press(ev:MouseEvent):void{
	updateChooser(false);
}
function ImgChooseUpBtn_RollOver(ev:MouseEvent):void{
}
function ImgChooseUpBtn_RollOut(ev:MouseEvent):void{
}

ImgChooseDownBtn.addEventListener(MouseEvent.CLICK, ImgChooseDownBtn_Press);
ImgChooseDownBtn.addEventListener(MouseEvent.ROLL_OVER, ImgChooseDownBtn_RollOver);
ImgChooseDownBtn.addEventListener(MouseEvent.ROLL_OUT,ImgChooseDownBtn_RollOut);
function ImgChooseDownBtn_Press(ev:MouseEvent):void{
	updateChooser(true);
}
function ImgChooseDownBtn_RollOver(ev:MouseEvent):void{
}
function ImgChooseDownBtn_RollOut(ev:MouseEvent):void{
}


var BlockSelected:int = 1;
ChooserMc.x = ImgChoose1MC.x;
ChooserMc.y = ImgChoose1MC.y;
var ChooserState:int = 2;
var MaxChooserState:int = 13;
updateChooser(true);

MonsterCheckBox.gotoAndStop(1);
var MonsterCheck:int = 0;
MoveToCheckBox.gotoAndStop(1);
var MoveToCheck:int = 0;
IsWallCheckBox.gotoAndStop(1);
var IsWallCheck:int = 0;
MonsterCheckBox.addEventListener(MouseEvent.CLICK, MonsterCheckBox_Press);
function MonsterCheckBox_Press(ev:MouseEvent):void{
	if(MonsterCheck == 0){
		MonsterCheck = 1;
		MonsterCheckBox.gotoAndStop(2);
	} else {
		MonsterCheck = 0;
		MonsterCheckBox.gotoAndStop(1);
	}
}
MoveToCheckBox.addEventListener(MouseEvent.CLICK, MoveToCheckBox_Press);
function MoveToCheckBox_Press(ev:MouseEvent):void{
	if(MoveToCheck == 0){
		MoveToCheck = 1;
		MoveToCheckBox.gotoAndStop(2);
	} else {
		MoveToCheck = 0;
		MoveToCheckBox.gotoAndStop(1);
	}
}
IsWallCheckBox.addEventListener(MouseEvent.CLICK, IsWallCheckBox_Press);
function IsWallCheckBox_Press(ev:MouseEvent):void{
	if(IsWallCheck == 0){
		IsWallCheck = 1;
		IsWallCheckBox.gotoAndStop(2);
	} else {
		IsWallCheck = 0;
		IsWallCheckBox.gotoAndStop(1);
	}
}

function updateChooser(ChooserUp:Boolean):void{
	if(ChooserUp){
		if(ChooserState+7 < MaxChooserState)
		ChooserState ++;
	} else {
		if(ChooserState > 2)
		ChooserState --;
	}
	ImgChoose1MC.gotoAndStop(ChooserState);
	ImgChoose2MC.gotoAndStop(ChooserState+1);
	ImgChoose3MC.gotoAndStop(ChooserState+2);
	ImgChoose4MC.gotoAndStop(ChooserState+3);
	ImgChoose5MC.gotoAndStop(ChooserState+4);
	ImgChoose6MC.gotoAndStop(ChooserState+5);
	ImgChoose7MC.gotoAndStop(ChooserState+6);
	ImgChoose8MC.gotoAndStop(ChooserState+7);
}




var gridSizeLevelCreator:int = 80;
var MostLeft:int = gridSizeLevelCreator/2;
var MostTop:int = gridSizeLevelCreator/2;
var LevelCreatorCurrentOverworldLevel:Array = new Array();
function CreateNewWorld(worldName:String, worldWidth:int, worldHeight:int):void {

	
	//Overworld Level Name
	LevelCreatorCurrentOverworldLevel[0] = new String(worldName);
	//Overworld Level Width
	LevelCreatorCurrentOverworldLevel[1] = new int(worldWidth);
	//Overworld Level Height
	LevelCreatorCurrentOverworldLevel[2] = new int(worldHeight);
	//Overworld Level Array
	LevelCreatorCurrentOverworldLevel[3] = new Array(LevelCreatorCurrentOverworldLevel[1]);
	

	var i:int;
	var j:int;
	for(i = 0; i<LevelCreatorCurrentOverworldLevel[1]; i++){
		var TempArray:Array = new Array(LevelCreatorCurrentOverworldLevel[2]);
		for(j = 0; j<LevelCreatorCurrentOverworldLevel[2]; j++){
			TempArray[j] = new Array(11);
			/*
			0: Passable - Int
			1: Block Type - Int
			2: Image Of Block - MovieClip
			3: Current Visibility - Int
			4: Emited Light - Int
			5: Visibility Image - MovieClip
			6: Level Taken To - String
			7: X Co-ordinate of new Level - Int
			8: Y Co-ordinate of new Level - Int
			9: Base Light - Int
			10: MonsterName - String
			*/
			TempArray[j][1] = new int(0);
			var tempGridItem:DevGridTest = new DevGridTest();
			addChild(tempGridItem);
			TempArray[j][2] = tempGridItem;
			TempArray[j][2].gotoAndStop(0);
			TempArray[j][2].x = MostLeft + (i*gridSizeLevelCreator)  - gridSizeLevelCreator/2;
			TempArray[j][2].y = MostTop + (j*gridSizeLevelCreator)  - gridSizeLevelCreator/2;
			SendMovieClipToBack(TempArray[j][2]);
			if(TempArray[j][2].x>=800){
				TempArray[j][2].visible = false;
			}
			if(TempArray[j][2].y>=800){
				TempArray[j][2].visible = false;
			}
			TempArray[j][0] = new int(0);
			TempArray[j][3] = new int(0);
			TempArray[j][4] = new int(0);
			TempArray[j][7] = new int(0);
			TempArray[j][8] = new int(0);
			TempArray[j][9] = new int(0);
			TempArray[j][6] = new String("");
			TempArray[j][10] = new String("");
		}
		LevelCreatorCurrentOverworldLevel[3][i] = TempArray;
	
	}

}

function ChangeBlock(InputMouseX:int, InputMouseY:int):void{
	//trace(MostLeft);
	//trace(MostTop);
	//trace(Math.floor((InputMouseX - MostLeft + 40)/80) + " , " + Math.floor((InputMouseY - MostTop + 40)/80));
	var GridX:int = Math.floor((InputMouseX - MostLeft + 40)/80);
	var GridY:int =  Math.floor((InputMouseY - MostTop + 40)/80);
	if((GridX < 0) || (GridY < 0) || (GridX >= LevelCreatorCurrentOverworldLevel[1]) || (GridY >= LevelCreatorCurrentOverworldLevel[2])){
		//OUTSIDE OF BOUNDS!
	} else {
		//UpdateGridPart!
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY]
		/*
			0: Passable - Int
			1: Block Type - Int
			2: Image Of Block - MovieClip
			3: Current Visibility - Int
			4: Emited Light - Int
			5: Visibility Image - MovieClip
			6: Level Taken To - String
			7: X Co-ordinate of new Level - Int
			8: Y Co-ordinate of new Level - Int
			9: Base Light - Int
			10: MonsterName - String
			*/
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY][9] = int(BaseLight_txt.text);
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY][4] = int(LightEmitted_txt.text);
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY][0] = int(IsWallCheck);
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY][3] = int(LightEmitted_txt.text);
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY][1] = int(ChooserState + BlockSelected - 1);
		LevelCreatorCurrentOverworldLevel[3][GridX][GridY][2].gotoAndStop(LevelCreatorCurrentOverworldLevel[3][GridX][GridY][1]);
		if(MoveToCheck == 1){
			LevelCreatorCurrentOverworldLevel[3][GridX][GridY][6] = LvlName_txt.text;
			LevelCreatorCurrentOverworldLevel[3][GridX][GridY][7] = int(LvlPosX_txt.text);
			LevelCreatorCurrentOverworldLevel[3][GridX][GridY][8] = int(LvlPosY_txt.text);
		} else {
			LevelCreatorCurrentOverworldLevel[3][GridX][GridY][6] = "";
		}
		if(MonsterCheck == 1){
			LevelCreatorCurrentOverworldLevel[3][GridX][GridY][10] = MonsterName_txt.text;
		} else {
			LevelCreatorCurrentOverworldLevel[3][GridX][GridY][10] = "";
		}
	}
	//trace(Math.floor((InputMouseY - MostTop + 40)/80));
}






ImgChoose1MC.addEventListener(MouseEvent.CLICK, ImgChoose1MC_Press);
function ImgChoose1MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose1MC.x;
	ChooserMc.y = ImgChoose1MC.y;
	BlockSelected = 1;
}
ImgChoose2MC.addEventListener(MouseEvent.CLICK, ImgChoose2MC_Press);
function ImgChoose2MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose2MC.x;
	ChooserMc.y = ImgChoose2MC.y;
	BlockSelected = 2;
}
ImgChoose3MC.addEventListener(MouseEvent.CLICK, ImgChoose3MC_Press);
function ImgChoose3MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose3MC.x;
	ChooserMc.y = ImgChoose3MC.y;
	BlockSelected = 3;
}
ImgChoose4MC.addEventListener(MouseEvent.CLICK, ImgChoose4MC_Press);
function ImgChoose4MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose4MC.x;
	ChooserMc.y = ImgChoose4MC.y;
	BlockSelected = 4;
}
ImgChoose5MC.addEventListener(MouseEvent.CLICK, ImgChoose5MC_Press);
function ImgChoose5MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose5MC.x;
	ChooserMc.y = ImgChoose5MC.y;
	BlockSelected = 5;
}
ImgChoose6MC.addEventListener(MouseEvent.CLICK, ImgChoose6MC_Press);
function ImgChoose6MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose6MC.x;
	ChooserMc.y = ImgChoose6MC.y;
	BlockSelected = 6;
}
ImgChoose7MC.addEventListener(MouseEvent.CLICK, ImgChoose7MC_Press);
function ImgChoose7MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose7MC.x;
	ChooserMc.y = ImgChoose7MC.y;
	BlockSelected = 7;
}
ImgChoose8MC.addEventListener(MouseEvent.CLICK, ImgChoose8MC_Press);
function ImgChoose8MC_Press(ev:MouseEvent):void{
	ChooserMc.x = ImgChoose8MC.x;
	ChooserMc.y = ImgChoose8MC.y;
	BlockSelected = 8;
}

/*
	var LevelCreatorCurrentOverworldLevel:Array = new Array();
	//Overworld Level Name
	LevelCreatorCurrentOverworldLevel[0] = new String(worldName);
	//Overworld Level Width
	LevelCreatorCurrentOverworldLevel[1] = new int(worldWidth);
	//Overworld Level Height
	LevelCreatorCurrentOverworldLevel[2] = new int(worldHeight);
	//Overworld Level Array
	LevelCreatorCurrentOverworldLevel[3] = new Array(LevelCreatorCurrentOverworldLevel[1]);
	*/
function SaveLevel():void{
	var SplitArray:String = "";

	//SplitArray.concat((LevelCreatorCurrentOverworldLevel[0]).toString());
	SplitArray += LevelCreatorCurrentOverworldLevel[0];
	SplitArray += "\n";
	SplitArray += LevelCreatorCurrentOverworldLevel[1];
	SplitArray += "\n";
	SplitArray += LevelCreatorCurrentOverworldLevel[2];
	SplitArray += "\n";
	for(var selectorI:uint = 0; selectorI < LevelCreatorCurrentOverworldLevel[1]; selectorI++){
		if(selectorI !=  0){
			SplitArray += "[";
		}
		for(var selectorJ:uint = 0; selectorJ < LevelCreatorCurrentOverworldLevel[2]; selectorJ++){
			if(selectorJ !=  0){
				SplitArray += "]";
			}
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][0];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][1];
			SplitArray += ","
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][3];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][4];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][6];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][7];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][8];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][9];
			SplitArray += ",";
			SplitArray += LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][10];
			/*
			0: Passable - Boolean
			1: Block Type - Int
			2: Image Of Block - MovieClip
			3: Current Visibility - Int
			4: Emited Light - Int
			5: Visibility Image - MovieClip
			6: Level Taken To - String
			7: X Co-ordinate of new Level - Int
			8: Y Co-ordinate of new Level - Int
			9: Base Light - Int
			10: MonsterName - String
			*/
			//trace("\n");
		}
	}
	//SplitArray.concat("/n");
	//SplitArray.concat((LevelCreatorCurrentOverworldLevel[1]).toString());
	//SplitArray.concat("/n");
	//SplitArray.concat((LevelCreatorCurrentOverworldLevel[2]).toString());
	//SplitArray.concat("/n");
	
	//SplitArray.concat((LevelCreatorCurrentOverworldLevel[0]).toString(), "/n", (LevelCreatorCurrentOverworldLevel[1]).toString(), "/n", (LevelCreatorCurrentOverworldLevel[2]).toString(), "/n");
	trace(SplitArray);	
	var MyFile:FileReference = new FileReference();
	MyFile.save(SplitArray);
}


function LevelCreatorUpdateGame(event:Event):void
{
	if(isKeyDown(83)){
		MostTop += 10;
	}
	if(isKeyDown(87)){
		MostTop -= 10;
	}
	if(isKeyDown(65)){
		MostLeft -= 10;
	}
	if(isKeyDown(68)){
		MostLeft += 10;
	}
	for(var selectorI:uint = 0; selectorI < LevelCreatorCurrentOverworldLevel[1]; selectorI++){
		for(var selectorJ:uint = 0; selectorJ < LevelCreatorCurrentOverworldLevel[2]; selectorJ++){
	LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].x = MostLeft + (selectorI*gridSizeLevelCreator)  - gridSizeLevelCreator/2;
	LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].y = MostTop + (selectorJ*gridSizeLevelCreator)  - gridSizeLevelCreator/2;
			if(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].x>=800){
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = false;
			} else if(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].x<=-100){
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = false;
			} else if(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].y>=800){
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = false;
			} else if(LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].y<=-100){
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = false;
			} else {
				LevelCreatorCurrentOverworldLevel[3][selectorI][selectorJ][2].visible = true;
			}
		}
	}
	
	/*
	Key Pressed: w (character code: 87)
	Key Pressed: a (character code: 65)
	Key Pressed: s (character code: 83)
	Key Pressed: d (character code: 68)
	
	MostLeft
	*/
}




/*
var keyArray:Array = new Array();
var i:Number;
var j:Number;
for (i=0; i<222; i++)
{
	keyArray.push([i,false]);
}
stage.addEventListener(KeyboardEvent.KEY_DOWN,checkKeysDown);
stage.addEventListener(KeyboardEvent.KEY_UP,checkKeysUp);
this.addEventListener(Event.ENTER_FRAME,UpdateGame);

this.addEventListener(Event.ENTER_FRAME,LevelCreatorUpdateGame);
function LevelCreatorUpdateGame(event:Event):void
{
	trace(isKeyDown(83));
}*/
